1. Encapsulation: Encapsulation is the concept of bundling data (attributes) and the methods (functions) that operate on that data into a single unit called a class.
The class defines a boundary around its data and methods, controlling access and interaction from outside.
Encapsulation promotes information hiding, where the internal details of how a class works are hidden from the outside world,
and only a well-defined interface is exposed.
eg. class

2. Abstraction: Abstraction involves representing the essential features of an object
while hiding the irrelevant or complex details.
It allows you to focus on the high-level functionality of objects rather than getting bogged down in implementation specifics. Abstraction helps in creating more understandable and manageable models of complex systems.
e.g. access modifiers

3. Inheritance: Inheritance is a mechanism that allows a new class (subclass or derived class)
to inherit properties and behaviors (fields and methods) from an existing class (superclass or base class).
This promotes code reuse and establishes a hierarchical relationship between classes.
Inheritance facilitates creating specialized classes that inherit common functionality
from a base class and can also add their own unique features.
e.g. parent, child classes

4. Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass.
It enables one interface to represent a general set of operations that can be implemented differently by various classes.
Polymorphism simplifies code by allowing you to write code that works with a base class or interface,
making it easier to accommodate different implementations or extensions.
e.g. System.out.println